name: Generate PDF

on:
  push:
    branches:
      - main
    # Ignore changes in folders that are affected by the auto commit.
    paths-ignore:
      - 'output/**'
  pull_request:
    branches:
      - main
env:
  FILENAME: course
  
jobs:          
  convert_via_pandoc:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: create file list
        id: files_list
        run: |
          mkdir -p output
          echo "files=$(printf '"%s" ' *.md)" > $GITHUB_OUTPUT
        
      # Runs a single command using the runners shell
      - name: Check current directory
        run: pwd
      - name: Download the script
        run: |
          curl -o $PWD/pandoc_preparation.sh https://gitlab.com/TIBHannover/oer/course-pandoc-preparation/-/raw/master/pandoc-preparation.sh
          mkdir -p build
          curl -o $PWD/build/default-pandoc.css https://gitlab.com/TIBHannover/oer/course-pandoc-preparation/-/raw/master/default-pandoc.css
          curl -o $PWD/build/create-image-license-reference.py https://gitlab.com/TIBHannover/oer/course-pandoc-preparation/-/raw/master/create-image-license-reference.py
          curl -o $PWD/build/create-lrmi-json-tag.py https://gitlab.com/TIBHannover/oer/course-pandoc-preparation/-/raw/master/create-lrmi-json-tag.py
      - name: Give script permissions
        run: chmod +x $PWD/pandoc_preparation.sh
      - name: Execute script
        run: $PWD/pandoc_preparation.sh $FILENAME


      - name: create file list after pandoc preparation
        id: files_list_preparation
        run: |
          echo "files=$(printf '"%s" ' *.md)"
          echo "$FILENAME-prepared.md" > $GITHUB_OUTPUT
          echo "file=$($FILENAME-prepared.md)" > $GITHUB_OUTPUT
          echo "${{ steps.files_list_preparation.outputs.file }}"

      - uses: docker://pandoc/latex:2.9
        with:
          args: |
            --output=output/course.pdf course.md
      - uses: docker://pandoc/latex:2.9
        with:
          args: course.md -f markdown -t epub3 -s -o output/course.epub --metadata pagetitle="$CI_PROJECT_TITLE"
            # title.txt $MARKDOWN_SOURCE_FILENAME-prepared.md -f markdown -t latex -s -o $MARKDOWN_SOURCE_FILENAME.pdf --metadata pagetitle="$CI_PROJECT_TITLE" --webtex
            # title.txt $MARKDOWN_SOURCE_FILENAME-prepared.md -f markdown -t html -s -o index.html --metadata pagetitle="$CI_PROJECT_TITLE" --include-in-header=metadata.json --katex --css pandoc.css
            # title.txt $MARKDOWN_SOURCE_FILENAME-prepared.md -f markdown -t asciidoc -s -o $MARKDOWN_SOURCE_FILENAME.asc --metadata pagetitle="$CI_PROJECT_TITLE" --webtex

          
      - uses: actions/upload-artifact@v3
        with:
          name: output
          path: output
          
      - name: Upload file to repository
        if: github.event_name == 'push'
        run: |
          git config --global user.name "OER Tutorials"
          git config --global user.email "sophie.matter@tib.eu"
          git add output/course.pdf
          git add output/course.epub
          git add course-prepared.md
          git commit -m "Generate PDF"
          git push
